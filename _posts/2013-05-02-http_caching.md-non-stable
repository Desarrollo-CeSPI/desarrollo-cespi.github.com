#Http caching up and running
Todos en algun momento nos topamos con la necesidad de tener que optimizar nuestro
sistema para que se aproveche las ventaja de usar cache, pero, como funciona una cache
y que parametros son los que tenemos que tener en cuenta. De eso se va a tratar este
post y esperamos pueda quedar claro que es lo que nos brinda HTTP para lograrlo.

##HTTP - Niveles de cache
Las cache HTTP no son mas que un repositorio donde se almacena paginas en base
a algun criterio. Estos almacenes de paginas pueden aparecer en distintos lugares
entre el Cliente y el Servidor. Cuando implementamos una cache debemos se concientes
de cada uno de los niveles de cache que tenemos para poder hacer un uso efectivo de
la misma.

A grandes razgos tenemos 3 niveles de cache:

Cliente --> Browser Cache ---> [Gateway Cache]* ---> [Reverse Proxy Cache]* ---> Server

En este caso vamos a hablar sobre Browser Caches y Reverse Proxy Caches, ya que son
estas las que podemos llegar a controlar de manera mas precisa.

Ambos tipos de cache funcionan de manera similar: alguien hace un requerimiento, verifican
si poseen una copia aceptable, en caso afirmativo lo devuelven sin acceder al servidor
y de lo contrario, consultan al servidor y (a veces) almacenan la respuesta.

##HTTP - Expiración y Validación
Como dijimos anteriormente, cuando alguien hace un requerimiento HTTP,
queda en la cache determinar si lo que esta almacenado puede ser utilizado o
si necesitamos consultar el servidor por una nueva copia.

El protocolo posee dos mecanismos: Validación y Expiración.

La Expiración es un mecanismo que apunta a disminuir la cantidad de accesos al
servidor, mediante la utilización de información que nos permita saber si un
requerimiento esta "fresco" o si se venció. Si tenemos una representación "fresca"
del recurso en cache, no tenemos necesidad de ir al servidor.
  Por el contrario, si la representación del recurso esta vencida, vamos a necesitar
consultar el servidor, actualizar la copia local y retornarla al cliente.

La Validación es otro mecanismo que apunta a disminuir el ancho de banda utilizado.
Permite determinar si una representación de un recurso se modifico respecto a la que
poseemos en cache. La verificación suele hacerse utilizando la fecha en la cual fue
modifica la representación o bien con un valor generado a partir del contenido de
la misma.

###Expiración
Los mecanismos de expiración varian segun la version del protocolo HTTP que
estemos utilizando

###Validación

### Cache Control Headers

| Request                             |   Response                    |
| ------------------------------------|-------------------------------|
| "no-cache"                          | "public"                      |
| "no-store"                          | "private" [="field-name"]     |
| "max-age" "=delta-seconds           | "no-cache" [="field-name"]    |
| "max-stale" [=delta-seconds ]       | "no-store"                    |
| "min-fresh" "=" delta-seconds       | "no-transform"                |
| "no-transform"                      | "must-revalidate"             |
| "only-if-cached"                    | "proxy-revalidate"            |
| cache-extension                     | "max-age" "=" delta-seconds   |
|                                     |  "s-maxage" "=" delta-seconds |

